# Install haven package for import .sav dataset
#install.packages("haven")
library(haven)
# Import the dataset
data <- read_sav("C:/Users/Jishan/Downloads/Exam/KiGGS03_06.sav")
head(data, 5)
colnames(data)
# Choose feature according to given variables names in the question
kiggs_jishan <- data[, c("sex", "age2", "e017a_k", "e02001", "e02002", "e02006", "e02009")]
str(kiggs_jishan)
head(kiggs_jishan, 10)
# Choose formatting steps from the provided Rmd file which name is data_formatting.Rmd
kiggs_jishan$sex      <- factor(kiggs_jishan$sex,      labels = c("boys", "girls"))
kiggs_jishan$age2     <- factor(kiggs_jishan$age2,     labels = c("0-1y", "2-3y", "4-5y", "6-7y", "8-9y", "10-11y", "12-13y", "14-15y", "16-17y"))
kiggs_jishan$e017a_k  <- factor(kiggs_jishan$e017a_k, labels = c("under 2500", "2500 - 2999", "3000 - 3499", "3500 - 3999", "4000 - 4499", "4500+"))
kiggs_jishan$e02001   <- factor(kiggs_jishan$e02001,  labels = c("yes", "no", "don't know"))
kiggs_jishan$e02002   <- factor(kiggs_jishan$e02002,  labels = c("yes", "no", "don't know"))
kiggs_jishan$e02006   <- factor(kiggs_jishan$e02006,  labels = c("yes", "no", "don't know"))
kiggs_jishan$e02009   <- factor(kiggs_jishan$e02009,  labels = c("yes", "no", "don't know"))
# Save the formatted dataframe on my local PC
save(kiggs_jishan, file = "kiggs_jishan.RData")
list.files()
library(dplyr)
library(dplyr)
# Check that the variables e02001, e02002, e02006, e02009 are all factors
kiggs_jishan$e02001 <- as.factor(kiggs_jishan$e02001)
kiggs_jishan$e02002 <- as.factor(kiggs_jishan$e02002)
kiggs_jishan$e02006 <- as.factor(kiggs_jishan$e02006)
kiggs_jishan$e02009 <- as.factor(kiggs_jishan$e02009)
# Confirm the structure
str(kiggs_jishan[, c("e02001", "e02002", "e02006", "e02009")])
# Set the value "donâ€™t know" of all four variables to NA for all children
kiggs_jishan$e02001[kiggs_jishan$e02001 == "don't know"] <- NA
kiggs_jishan$e02002[kiggs_jishan$e02002 == "don't know"] <- NA
kiggs_jishan$e02006[kiggs_jishan$e02006 == "don't know"] <- NA
kiggs_jishan$e02009[kiggs_jishan$e02009 == "don't know"] <- NA
# Delete this now empty factor level from the variables
kiggs_jishan$e02001 <- droplevels(kiggs_jishan$e02001)
kiggs_jishan$e02002 <- droplevels(kiggs_jishan$e02002)
kiggs_jishan$e02006 <- droplevels(kiggs_jishan$e02006)
kiggs_jishan$e02009 <- droplevels(kiggs_jishan$e02009)
# Check whether these two steps worked as intended
summary(kiggs_jishan[, c("e02001", "e02002", "e02006", "e02009")])
# Convert disease variables to numeric (1 if "yes", 0 otherwise)
kiggs_jishan$e02001 <- as.numeric(kiggs_jishan$e02001 == "yes")
kiggs_jishan$e02002 <- as.numeric(kiggs_jishan$e02002 == "yes")
kiggs_jishan$e02006 <- as.numeric(kiggs_jishan$e02006 == "yes")
kiggs_jishan$e02009 <- as.numeric(kiggs_jishan$e02009 == "yes")
# Compute burden as sum of diseases per child
kiggs_jishan$burden <- rowSums(kiggs_jishan[, c("e02001", "e02002", "e02006", "e02009")], na.rm = TRUE)
# Summary of the burden
summary(kiggs_jishan$burden)
# Now, save the updated dataframe with burden variable
save(kiggs_jishan, file = "kiggs_jishan.RData")
# Alternative way: calculate the proportion of children with at least one disease
prop_diseased <- mean(kiggs_jishan$burden > 0, na.rm = TRUE)
prop_diseased
library(summarytools)
library(summarytools)
# Create a summary table consider the variables age2, sex and burden
summary_table <- summarytools::dfSummary(kiggs_jishan[, c("age2", "sex", "burden")])
# Print the table for that three features
print(summary_table, method = "render")
# Now, count the missing values for the feature age2, sex and burden
missing_values <- data.frame(
Variable = c("age2", "sex", "burden"),
Missing_Count = c(sum(is.na(kiggs_jishan$age2)),
sum(is.na(kiggs_jishan$sex)),
sum(is.na(kiggs_jishan$burden)))
)
# Print the results
print(missing_values)
# Count about the complete dataset
complete_cases <- sum(complete.cases(kiggs_jishan[, c("age2", "sex", "burden")]))
# Print the complete observations number
print(paste("Complete observations:", complete_cases))
library(ggplot2)
library(stats)
library(broom)
# Now, convert burden into a binary variable
kiggs_jishan$burden_binary <- ifelse(kiggs_jishan$burden > 0, 1, 0)
# Fit the logistic regression model
logistic_model <- glm(burden_binary ~ e017a_k, data = kiggs_jishan, family = binomial)
# Print the full model summary
summary(logistic_model)
# Results are rounding values to 3 decimal places
logistic_results <- tidy(logistic_model)
logistic_results <- logistic_results %>%
mutate(estimate = round(estimate, 3),
std.error = round(std.error, 3),
statistic = round(statistic, 3),
p.value = round(p.value, 3))
# Print the formatted results
print(logistic_results)
# Extract the logistic regression model results
logistic_model_results <- tidy(logistic_model, exponentiate = TRUE, conf.int = TRUE)
# Format results
logistic_table <- logistic_model_results %>%
select(term, estimate, p.value, conf.low, conf.high) %>%
rename(Odds_Ratio = estimate, P_Value = p.value, CI_Lower = conf.low, CI_Upper = conf.high)
# Print the final table
knitr::kable(logistic_table, caption = "Logistic Regression Results", digits = 3)
library(pwr)
library(pwr)
# Define parameters in the chunk
effect_size <- 0.5
alpha <- 0.05
power <- 0.8
# Now, compute the required sample size for a two-sample t-test
sample_size <- pwr.t.test(d = effect_size, power = power, sig.level = alpha, type = "two.sample")$n
# Print the required sample size each group
print(paste("Minimum required sample size each group:", ceiling(sample_size)))
